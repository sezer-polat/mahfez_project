generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String
  phone         String?
  address       String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  bookings      Booking[]
  posts         Post[]
  sessions      Session[]
  favorites     Favorite[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Tour {
  id          String       @id @default(cuid())
  title       String
  description String
  price       Float
  duration    Int
  image       String
  categoryId  String
  category    Category     @relation(fields: [categoryId], references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  capacity    Int
  available   Int
  startDate   DateTime?
  endDate     DateTime?
  isActive    Boolean      @default(true)
  bookings    Booking[]
  itinerary   Itinerary[]  @relation("TourItinerary")
  images      TourImage[]  @relation("TourImages")
  reservations Reservation[] @relation("TourReservations")
  favorites   Favorite[]   @relation("TourFavorites")
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  tours       Tour[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Booking {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  tourId    String
  tour      Tour     @relation(fields: [tourId], references: [id])
  status    Status   @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  numberOfPeople Int
  totalPrice Float
  notes String?
}

model Settings {
  id              String   @id @default(cuid())
  siteName        String
  siteDescription String
  contactEmail    String
  contactPhone    String
  address         String
  socialMedia     Json
  logo            String?
  favicon         String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   String
  slug      String   @unique
  image     String?
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
}

model Contact {
  id        String        @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String
  status    ContactStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String?
  subject   String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Itinerary {
  id            String   @id @default(cuid())
  tourId        String
  tour          Tour     @relation("TourItinerary", fields: [tourId], references: [id], onDelete: Cascade)
  day           Int
  title         String
  description   String
  activities    String[]
  meals         String[]
  accommodation String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model TourImage {
  id        String   @id @default(cuid())
  tourId    String
  tour      Tour     @relation("TourImages", fields: [tourId], references: [id], onDelete: Cascade)
  url       String
  title     String
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reservation {
  id              String   @id @default(cuid())
  tourId          String
  firstName       String
  lastName        String
  email           String
  phone           String
  address         String
  city            String
  country         String
  specialRequests String?
  numberOfPeople  Int
  status          String   @default("PENDING")
  totalPrice      Float
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  tour            Tour     @relation("TourReservations", fields: [tourId], references: [id], onDelete: Cascade)
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  tourId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tour      Tour     @relation("TourFavorites", fields: [tourId], references: [id], onDelete: Cascade)

  @@unique([userId, tourId])
}

enum Role {
  USER
  ADMIN
}

enum Status {
  PENDING
  CONFIRMED
  CANCELLED
}

enum ContactStatus {
  PENDING
  READ
  REPLIED
}
